//  ProDoctorAPIClient.m
//
//  Generated by the the JBoss AeroGear Xcode Project Template on 6/17/13.
//  See Project's web site for more details http://www.aerogear.org
//

#import "ProDoctorAPIClient.h"
#import "AGLead.h"
#import "AGConfig.h"

@implementation ProDoctorAPIClient

@synthesize leadsPipe = _leadsPipe;
@synthesize userId = _userId;

@synthesize localStore = _localStore;
@synthesize pushedLocalStore = _pushedLocalStore;

+ (ProDoctorAPIClient *)sharedInstance {
    static ProDoctorAPIClient *_sharedInstance = nil;
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        _sharedInstance = [[self alloc] init];
    });

    return _sharedInstance;
}

- (void)loginWithUsername:(NSString *)username
                 password:(NSString *)password
                  success:(void (^)())success
                  failure:(void (^)(NSError *error))failure {

    NSURL *baseURL = [NSURL URLWithString:URL_PRODOCTOR];

    // create the Pipeline object
    AGPipeline *pipeline = [AGPipeline pipelineWithBaseURL:baseURL];

    // create the Authenticator object
    AGAuthenticator *authenticator = [AGAuthenticator authenticator];

    // request the default 'AeroGear' authentication module from 'Authenticator'
    id<AGAuthenticationModule> authMod = [authenticator auth:^(id<AGAuthConfig> config) {
        [config setName:@"todoAuthMod"]; // assign it a name
        [config setBaseURL:baseURL]; // the base url to authenticate to
        [config setType:@"AG_SECURITY"]; // can be omitted as 'AG_SECURITY' is the default auth module
        [config setLoginEndpoint:@"login"];
    }];

    // login to the service
    [authMod login:username password:password success:^(id object) {
        // if successfully logged in, it is time to construct our pipes.
        // Note that we assign the authentication module we
        // created earlier, so every request can be properly
        // authenticated against the remote endpoints.
        _userId = object[@"id"];
        _loginName = object[@"loginName"];
        _leadsPipe = [pipeline pipe:^(id<AGPipeConfig> config) {
            [config setName:@"leads"];
            [config setAuthModule:authMod];
            
        }];
        
        // initialize local store
        AGDataManager *dm = [AGDataManager manager];
        _localStore = [dm store:^(id<AGStoreConfig> config) {
            // each login has a different store associated
            [config setName:username];
            [config setType:@"PLIST"];
        }];
        _pushedLocalStore = [dm store:^(id<AGStoreConfig> config) {
            // each login has a different store associated
            [config setName:[NSString stringWithFormat: @"pusheLocalStorage%@", username]];
            [config setType:@"PLIST"];
        }];
        // inform client that we have successfully logged in
        success();

    } failure:^(NSError *error) {
        failure(error);
    }];
}

- (void)fetchLeads:(void (^)(NSMutableArray *leads))success
           failure:(void (^)(NSError *error))failure {
    
    [_leadsPipe read:^(id responseObject) {
        NSMutableArray *leads = [NSMutableArray array];
        
        for (id leadDict in responseObject) {
            AGLead *lead = [[AGLead alloc] initWithDictionary:leadDict];
            
            [leads addObject:lead];
        }
        
        success(leads);
        
    } failure:^(NSError *error) {
        
        failure(error);
    }];
}


- (void)postLead:(AGLead *)lead
         success:(void (^)())success
         failure:(void (^)(NSError *error))failure {
    
    [_leadsPipe save:[lead dictionary] success:^(id responseObject) {
        if (lead.recId == nil) { // if it is a new lead, set the id
            lead.recId = [responseObject objectForKey:@"id"];
        }
        
        success();
        
    } failure:^(NSError *error) {
        failure(error);
    }];
}

@end
